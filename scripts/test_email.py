#!/usr/bin/env python3
"""
Test script for qPKI email functionality with MailHog
"""

import os
import sys
import json

# Add the source directory to Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'src')))

from qpki.email_notifier import EmailNotificationService

def test_mailhog_connection():
    """Test basic email sending to MailHog"""
    print("🧪 Testing qPKI Email Functionality with MailHog")
    print("=" * 50)
    
    # Create email service instance
    app_dir = os.path.dirname(__file__)
    email_service = EmailNotificationService(app_dir=app_dir)
    
    print(f"📧 Email configuration loaded:")
    print(f"  - Enabled: {email_service.config.get('enabled')}")
    print(f"  - Test Mode: {email_service.config.get('test_mode')}")
    print(f"  - SMTP Server: {email_service.config.get('smtp_server')}:{email_service.config.get('smtp_port')}")
    print(f"  - From Email: {email_service.config.get('from_email')}")
    print()
    
    # Test 1: Send a basic test email
    print("📮 Test 1: Sending basic test email...")
    
    test_email = "test@example.com"
    subject = "qPKI Email Test - MailHog Integration"
    html_body = """
    <html>
    <body>
        <h2>🎉 qPKI Email Test Successful!</h2>
        <p>This email was sent from the qPKI system to test MailHog integration.</p>
        <ul>
            <li>✅ SMTP Connection: Working</li>
            <li>✅ Email Templates: Loaded</li>
            <li>✅ MailHog Integration: Active</li>
        </ul>
        <p><strong>Next Steps:</strong></p>
        <ol>
            <li>Check MailHog web interface at <a href="http://localhost:8025">http://localhost:8025</a></li>
            <li>Disable test mode to send real emails</li>
            <li>Configure certificate expiration monitoring</li>
        </ol>
        <p><em>Generated by qPKI Email Notification System</em></p>
    </body>
    </html>
    """
    
    text_body = """
    qPKI Email Test Successful!
    
    This email was sent from the qPKI system to test MailHog integration.
    
    ✅ SMTP Connection: Working
    ✅ Email Templates: Loaded  
    ✅ MailHog Integration: Active
    
    Next Steps:
    1. Check MailHog web interface at http://localhost:8025
    2. Disable test mode to send real emails
    3. Configure certificate expiration monitoring
    
    Generated by qPKI Email Notification System
    """
    
    success = email_service._send_email(test_email, subject, html_body, text_body)
    
    if success:
        print("✅ Test email sent successfully!")
        if email_service.config.get('test_mode'):
            print("⚠️  Note: Test mode is enabled - email was logged but not actually sent")
            print("💡 To send real emails, set 'test_mode': false in config/email_config.json")
        else:
            print("📧 Email sent to MailHog!")
            print("🌐 Check MailHog web interface: http://localhost:8025")
    else:
        print("❌ Failed to send test email")
        return False
    
    print()
    
    # Test 2: Test email configuration update
    print("⚙️  Test 2: Testing email configuration...")
    
    # Show current configuration
    print("📋 Current email configuration:")
    for key, value in email_service.config.items():
        if key not in ['email_templates', 'notification_intervals']:
            print(f"  - {key}: {value}")
    
    print()
    
    # Test 3: Test template rendering (if templates exist)
    print("📄 Test 3: Testing email templates...")
    
    template_dir = os.path.join(app_dir, 'templates', 'email')
    if os.path.exists(template_dir):
        templates = [f for f in os.listdir(template_dir) if f.endswith('.html')]
        print(f"📁 Found {len(templates)} email templates:")
        for template in sorted(templates):
            print(f"  - {template}")
    else:
        print("⚠️  Email templates directory not found")
    
    print()
    print("🎯 Email Test Summary:")
    print("=" * 50)
    print("✅ Email service initialized")
    print("✅ Configuration loaded")
    print("✅ MailHog connection configured")
    
    if email_service.config.get('test_mode'):
        print("⚠️  Test mode enabled - emails are logged only")
        print("💡 To enable real email sending:")
        print("   1. Edit config/email_config.json")
        print("   2. Set 'test_mode': false")
        print("   3. Restart the application")
    else:
        print("📧 Email sending enabled")
        print("🌐 Check emails in MailHog: http://localhost:8025")
    
    return True

def disable_test_mode():
    """Disable test mode in email configuration"""
    config_path = os.path.join(os.path.dirname(__file__), 'config', 'email_config.json')
    
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        config['test_mode'] = False
        
        with open(config_path, 'w') as f:
            json.dump(config, f, indent=2)
        
        print("✅ Test mode disabled in email configuration")
        print("📧 Emails will now be sent to MailHog")
        return True
        
    except Exception as e:
        print(f"❌ Failed to update configuration: {e}")
        return False

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='Test qPKI email functionality')
    parser.add_argument('--disable-test-mode', action='store_true', 
                      help='Disable test mode and enable real email sending')
    
    args = parser.parse_args()
    
    if args.disable_test_mode:
        disable_test_mode()
    else:
        test_mailhog_connection()
