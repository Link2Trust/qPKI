name: qPKI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHONPATH: ${{ github.workspace }}/src

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to speed up CI
          - os: macos-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.9

    services:
      mailhog:
        image: mailhog/mailhog:latest
        ports:
          - 1025:1025
          - 8025:8025
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: qpki_test
          POSTGRES_USER: qpki
          POSTGRES_PASSWORD: qpki_test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl libffi
        export LDFLAGS="-L$(brew --prefix openssl)/lib"
        export CPPFLAGS="-I$(brew --prefix openssl)/include"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Install package
      run: pip install -e .

    - name: Create test configuration
      run: |
        mkdir -p config
        cat > config/email_config.json << EOF
        {
          "enabled": false,
          "test_mode": true,
          "smtp_server": "localhost",
          "smtp_port": 1025,
          "notification_intervals": []
        }
        EOF
        cat > config/database_config.json << EOF
        {
          "db_type": "sqlite",
          "connection_string": "sqlite:///test_qpki.db",
          "auto_migrate": true
        }
        EOF

    - name: Run cryptographic tests
      run: |
        python -m pytest tests/ -v --cov=qpki --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Test application startup
      run: |
        timeout 30s python app.py &
        sleep 10
        curl -f http://localhost:9090/ || exit 1
        pkill -f "python app.py" || true
      env:
        FLASK_ENV: testing
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Test email functionality with MailHog
      run: |
        # Test email configuration
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from qpki.email_notifier import EmailNotificationService
        service = EmailNotificationService()
        print('Email service initialized successfully')
        "
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/qpki:latest
          ghcr.io/${{ github.repository_owner }}/qpki:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  release:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Create release archive
      run: |
        tar -czf qpki-${{ github.event.release.tag_name }}.tar.gz \
          --exclude='.git' \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='keys' \
          --exclude='ca' \
          --exclude='certificates' \
          --exclude='crl' \
          --exclude='logs' \
          --exclude='*.db' \
          .

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./qpki-${{ github.event.release.tag_name }}.tar.gz
        asset_name: qpki-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip
